#
#
# Default configuration file for mgigff. This file is always read (first),
# and provides default settings for variables. Defaults can be overridden / augmented
# by configs specified by command line arg. (see mgigff.py)
#
# NOTE that all environment variables are available for string substitution in this file.
# For example, 
#	errorMessage=Could not find file in %(path)s.
# the "%(path)s" part would be expanded to into the current value of the PATH environment
# variable. Note the lower case - this is (unfortunately) required; all the variable names 
# get converted to lower case.
#
###---###---###---###---###---###---###
[MGIGFF]

#	Which Genome Build
#
genomeBuild=GRCm38-C57BL/6J

#	directory containing the provider input files
#	(usually provided by add'l .cfg file)
dataDirectory=/data/research/mouse_build_38_external/original_annotations

#	directory where working files and log files are written
#
workingDirectory=%(dataloadsoutput)s/mgi/mgigff/output

#
#	directory where final output goes
#	(if undefined or blank, no distribution step - everything stays
#	in the working directory)
#
distributionDirectory=%(ftproot)s/pub/mgigff

#	prefix for main output file
#
mgiPrefix=MGI

#	prefix of the exome output file
#
exomePrefix=MGI.exome

#	name of the README file that goes with it
#
mgiReadme=README.txt

#
# The base URL to use for generating URLs to various files
baseUrl=ftp://ftp.informatics.jax.org/pub/mgigff

#
#	file where log messages go
logFile=LOG

# logLevel is one of: DEBUG, INFO, WARNING, ERROR or CRITICAL.
# Can also be an integer, where the above constants correspond 
# to 0,10,20,30,40,50, respectively.
#
logLevel=DEBUG

#	which MGI database server to query 
#
dbserver=adhoc.informatics.jax.org
dbdatabase=mgd
dbuser=mgd_public
dbpassword=mgdpub

#
gnusort=%(gnusort)s
#grep=%(grep)s
#bgzip=%(bgzip)s
#tabix=%(tabix)s

#
#
contactEmail=Joel.Richardson@jax.org

#######################################
# The following parameters apply to phase 2. They are for
# filtering alignments from Blat.
#######################################

#
# Minimum percent identity of HSP rel. to query seq.
phase2minidentity=95

#
# Minimum percent length of HSP rel. to query seq.
phase2minlength=75

#
# Maximum distance in kilobases separating alignments for
# different sequences of a given gene.
phase2maxdistance=10

###---###---###---###---###---###---###
#
# Converters convert provider input files to output files.
# Each converter has a configuration section named
# "converter.XXXX", where "XXXX" is the converter's name.
# Each section defines a "command", whose value is
# the shell command to run the converter. Each command
# should include placeholders "INPUT" and "OUTPUT" which
# will be replaced with the appropriate file names at runtime.
# 
[converter.NOOP]
executable=/bin/cp
command=%(executable)s INPUT > OUTPUT

[converter.GTF2GFF3]
executable=%(perl)s %(mgigffhome)s/bin/gtf2gff3/gtf2gff3
configfile=%(mgigffhome)s/bin/gtf2gff3/gtf2gff3.cfg
command=%(executable)s -c %(configfile)s INPUT > OUTPUT

[converter.ENTREZ2GFF3]
assemblyarg=GRCm38.p2-C57BL/6J
executable=%(python)s %(mgigffhome)s/bin/entrez2gff3.py
# The conversion script depends on the file being sorted
# so that all features with the same GeneID/transcript are together.
command=%(gnusort)s -k11,11 -k14,14 -s INPUT | %(executable)s -a %(assemblyarg)s > OUTPUT

[converter.CONVERTNCBI]
executable=%(python)s %(mgigffhome)s/bin/convertNCBI.py
# The conversion script depends on the file being sorted
# so that all features with the same GeneID/transcript are together.
command=%(executable)s INPUT > OUTPUT

[converter.MIRBASE2GFF3]
executable=%(mgigffhome)s/bin/mirbase2gff3.py
command=%(python)s %(executable)s < INPUT > OUTPUT

[converter.PHASE2QUERY]
executable=%(mgigffhome)s/bin/phase2query.py
command=%(python)s %(executable)s INPUT OUTPUT

[converter.SEQID2FA]
executable=%(mgigffhome)s/bin/seqid2fa.py
command=%(python)s %(executable)s INPUT OUTPUT

[converter.GFCLIENT]
executable=gfClient
host=hobbiton.informatics.jax.org
# use 9037 (build 37) or 9038 (build38) 
port = 9038
directory=/
args=-nohead -minIdentity=95
command=%(executable)s %(args)s %(host)s %(port)s %(directory)s INPUT OUTPUT

[converter.PSLREPS]
executable=pslReps
args=-singleHit -nohead
command=%(executable)s %(args)s INPUT OUTPUT

[converter.PHASE2MERGE]
executable=%(mgigffhome)s/bin/phase2merge.py
command=%(python)s %(executable)s INPUT | %(gnusort)s -t "	" -k10,10 > OUTPUT

#[converter.BGZIP]
#executable=%(bgzip)s
#command=%(grep)s -v ^"#" INPUT | %(gnusort)s -k1,1 -k4,4n | %(executable)s > OUTPUT
#
#[converter.TABIX]
#executable=%(tabix)s
#command=%(executable)s -p gff INPUT

###---###---###---###---###---###---###
#
# Providers supply gene models. Each provider has a
# config section named "provider.XXXX" where XXXX is
# the provider's name. Each provider section should define
#	name	- the provider's name (same as in section name)
#	mgiLDBkey - providers must have logical databases in MGI. 
#	    This is the db key for the provider.
#	fileRegex - a regular expression that will match the provider's
#	    input file name.
#	converter - name of the converter to use to convert provider's
#	    input file to GFF3
# 
# 
[provider.ENSEMBL]
name=ENSEMBL
mgiLDBkey=60
# eg, ENSEMBLv61_B37_GTF_020111.txt
fileRegex=ENSEMBL.*\.txt
converter=GTF2GFF3

###---###---###---###---###---###---###
[provider.VEGA]
name=VEGA
mgiLDBkey=85
# eg, VEGAv41_B37_GTF_020111.txt
fileRegex=VEGA.*\.txt
converter=GTF2GFF3

###---###---###---###---###---###---###
[provider.NCBI_Gene]
name=NCBI_Gene
mgiLDBkey=59
fileRegex=seq_gene.*\.md
converter=ENTREZ2GFF3

###---###---###---###---###---###---###
[xprovider.NCBI_Gene]
name=NCBI_Gene
mgiLDBkey=59
fileRegex=ref_GRCm.*\.gff3
converter=CONVERTNCBI

###---###---###---###---###---###---###
[provider.miRBase]
name=miRBase
mgiLDBkey=83
fileRegex=miRBase.*_mmu\.gff3
converter=MIRBASE2GFF3
